import groovy.io.FileType
import java.nio.file.FileAlreadyExistsException
import java.nio.file.Files
import java.nio.file.FileVisitOption
import java.nio.file.FileVisitResult
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.SimpleFileVisitor
import java.security.MessageDigest
import java.util.zip.ZipInputStream
import java.util.zip.ZipOutputStream
import java.util.zip.ZipEntry

gradle.ext.SCRATCH_DIR_PROPERTY = 'software.amazon.aws.lambdabuilders.scratch-dir'

// Called after the project has been evaluated
gradle.afterProject({p ->
    def buildDir = buildDirForProject(p)
    p.buildDir = buildDir
})

gradle.taskGraph.afterTask{ t ->
    if (t.name != 'build') {
        return;
    }

    assertExpectedBuildDir(t.project)

    def artifactJars = t.project.configurations.archives.artifacts.files.files

    def runtimeCpJars = t.project.configurations.runtimeClasspath.files

    def zipArtifact = createArtifactDir(t.project).resolve("${t.project.name}.zip")

    createLambdaArtifact(zipArtifact, artifactJars, runtimeCpJars)
}

def buildDirForProject(p) {
    def scratchDir = System.properties[SCRATCH_DIR_PROPERTY]
    if (scratchDir == null) {
        throw new RuntimeException("Missing '${SCRATCH_DIR_PROPERTY}' value")
    }
    return Paths.get(scratchDir, scratchDirForProject(p), 'build')
}

def scratchDirForProject(p) {
    def sha1 = MessageDigest.getInstance('SHA-1')
    return sha1.digest(p.projectDir.toString().getBytes('UTF-8')).encodeHex().toString()
}

def assertExpectedBuildDir(p) {
    def expected = buildDirForProject(p)
    if (!expected.equals(p.buildDir.toPath())) {
        throw new RuntimeException("Project buildDir was changed by the project build script! Expected $expected but found ${p.buildDir}")
    }
}

def createArtifactDir(project) {
    def distsDir = project.buildDir.toPath().resolve(project.distsDirName).resolve('lambda-build')
    try {
        Files.createDirectories(distsDir)
    } catch (FileAlreadyExistsException e) {
        // ignored
    }
    return distsDir
}

def createLambdaArtifact(artifactPath, artifactJars, classPathJars) {
    artifactPath.withOutputStream({ artifactOs ->
        def zipOs = new ZipOutputStream(artifactOs)

        artifactJars.each {
            it.withInputStream({ jis ->
                def zipIs = new ZipInputStream(jis)
                for (def e = zipIs.getNextEntry(); e != null; e = zipIs.getNextEntry()) {
                    if (!e.isDirectory()) {
                        copyToZip(zipOs, e.name, zipIs)
                    }
                    zipIs.closeEntry()
                }
                zipIs.close()
            })
        }

        classPathJars.each {
            it.withInputStream({ jis ->
                copyToZip(zipOs, "lib/$it.name", jis)
            })
        }

        zipOs.close()
    })
}

def copyToZip(zipOs, name, fileIs) {
    zipOs.putNextEntry(new ZipEntry(name))
    byte[] buff = new byte[4096]
    int bytesRead
    while ((bytesRead = fileIs.read(buff)) != -1) {
        zipOs.write(buff, 0, bytesRead)
    }
    zipOs.closeEntry()
}
