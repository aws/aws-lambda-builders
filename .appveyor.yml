version: 1.0.{build}
image:
  - Visual Studio 2019
  - Ubuntu

environment:
  GOVERSION: 1.11
  GRADLE_OPTS: -Dorg.gradle.daemon=false
  nodejs_version: "14.17.6"
  CARGO_LAMBDA_VERSION: "v0.6.1"
  ZIG_VERSION: "0.9.1"

  matrix:
    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      LINE_COVERAGE: "91"
      NEW_FLAKE8: 0
      JAVA_HOME: "C:\\Program Files\\Java\\jdk11"
    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"
      LINE_COVERAGE: "91"
      NEW_FLAKE8: 0
      JAVA_HOME: "C:\\Program Files\\Java\\jdk11"
    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8"
      PYTHON_ARCH: "64"
      LINE_COVERAGE: "72"
      NEW_FLAKE8: 1
      JAVA_HOME: "C:\\Program Files\\Java\\jdk11"
    - PYTHON: "C:\\Python39-x64"
      PYTHON_VERSION: "3.9"
      PYTHON_ARCH: "64"
      LINE_COVERAGE: "72"
      NEW_FLAKE8: 1
      JAVA_HOME: "C:\\Program Files\\Java\\jdk11"

build: off

for:
  - matrix:
      only:
        - image: Visual Studio 2019

    environment:
      GOPATH: c:\gopath

    install:
      # To run Nodejs workflow integ tests
      - ps: Install-Product node $env:nodejs_version

      - "set PATH=%PYTHON%;%PYTHON%\\Scripts;%PYTHON%\\bin;%PATH%"
      - "%PYTHON%\\python.exe -m pip install -r requirements/dev.txt"
      - "%PYTHON%\\python.exe -m pip install -e ."
      - "gem --version"
      - "gem install bundler -v 1.17.3"
      - "bundler --version"
      - "echo %PATH%"

      # setup go
      - rmdir c:\go /s /q
      - "choco install golang --version 1.15.7"
      - setx PATH "C:\go\bin;C:\gopath\bin;C:\Program Files (x86)\Bazaar\;C:\Program Files\Mercurial;%PATH%;"
      - "go version"
      - "go env"

      # setup Gradle
      - "choco install gradle"

      # setup make
      - "choco install make"

      # install dotnet6
      - ps: "&powershell -NoProfile -ExecutionPolicy unrestricted -Command \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; &([scriptblock]::Create((Invoke-WebRequest -UseBasicParsing 'https://dot.net/v1/dotnet-install.ps1'))) -Version 6.0.200 -InstallDir 'C:\\Program Files\\dotnet\\'\""

      # install Zig to cross compile Rust functions
      - ps: Invoke-WebRequest -Uri https://ziglang.org/download/$env:ZIG_VERSION/zig-windows-x86_64-$env:ZIG_VERSION.zip -OutFile C:\Users\appveyor\ziglang.zip
      - ps: Expand-Archive -DestinationPath C:\Users\appveyor\ C:\Users\appveyor\ziglang.zip
      - set PATH=%PATH%;C:\Users\appveyor\zig-windows-x86_64-%ZIG_VERSION%
      - "zig version"
      - "clang --version"

      # install Rust
      - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
      - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable
      - ps: Invoke-WebRequest -Uri https://github.com/calavera/cargo-lambda/releases/download/$env:CARGO_LAMBDA_VERSION/cargo-lambda-$env:CARGO_LAMBDA_VERSION-x86_64-pc-windows-msvc.zip -OutFile C:\Users\appveyor\cargo-lambda.zip
      - ps: Expand-Archive -DestinationPath C:\Users\appveyor\.cargo\bin C:\Users\appveyor\cargo-lambda.zip
      - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
      - set RUST_BACKTRACE=1
      - rustup target add x86_64-unknown-linux-gnu --toolchain stable
      - rustup target add aarch64-unknown-linux-gnu --toolchain stable
      - rustc -V
      - cargo -V
      - cargo lambda -V

      # Echo final Path
      - "echo %PATH%"

    test_script:
      - ps: "& \"$env:PYTHON\\python.exe\" -m pytest --cov aws_lambda_builders --cov-report term-missing tests/unit tests/functional"
      - ps: "& \"$env:PYTHON\\python.exe\" -m pytest tests/integration"

  - matrix:
      only:
        - image: Ubuntu

    install:
      - sh: "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64"
      - sh: "PATH=$JAVA_HOME/bin:$PATH"
      - sh: "source ${HOME}/venv${PYTHON_VERSION}/bin/activate"
      - sh: "nvm install ${nodejs_version}"
      - sh: "npm install npm@7.24.2 -g"
      - sh: "npm -v"
      - sh: "echo $PATH"
      - sh: "java --version"

      # Install latest gradle
      - sh: "sudo apt-get -y remove gradle"
      - sh: "wget https://services.gradle.org/distributions/gradle-5.5-bin.zip -P /tmp"
      - sh: "sudo unzip -d /opt/gradle /tmp/gradle-*.zip"
      - sh: "PATH=/opt/gradle/gradle-5.5/bin:$PATH"

      # install Zig to cross compile Rust functions
      - sh: "wget https://ziglang.org/download/$ZIG_VERSION/zig-linux-x86_64-$ZIG_VERSION.tar.xz -P /tmp"
      - sh: "sudo tar -C /opt -xf /tmp/zig-linux-x86_64-$ZIG_VERSION.tar.xz"
      - sh: "PATH=/opt/zig-linux-x86_64-$ZIG_VERSION:$PATH"

      # Install rust
      - sh: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal"
      - sh: "wget https://github.com/calavera/cargo-lambda/releases/download/$CARGO_LAMBDA_VERSION/cargo-lambda-$CARGO_LAMBDA_VERSION-x86_64-unknown-linux-musl.tar.gz -P /tmp"
      - sh: "tar -C ${HOME}/.cargo/bin -zxf /tmp/cargo-lambda-*.tar.gz"
      - sh: "PATH=${HOME}/.cargo/bin:$PATH"
      - sh: "rustup target add x86_64-unknown-linux-gnu --toolchain stable"
      - sh: "rustup target add aarch64-unknown-linux-gnu --toolchain stable"
      - sh: "rustc -V"
      - sh: "cargo -V"
      - sh: "cargo lambda -V"

    build_script:
      - 'python -c "import sys; print(sys.executable)"'
      - 'LAMBDA_BUILDERS_DEV=1 pip install -e ".[dev]"'

    test_script:
      - "LAMBDA_BUILDERS_DEV=1 pytest --cov aws_lambda_builders --cov-report term-missing --cov-fail-under ${LINE_COVERAGE} tests/unit tests/functional"
      - "pylint --rcfile .pylintrc aws_lambda_builders"

      # Runs only in Linux
      - "LAMBDA_BUILDERS_DEV=1 pytest -vv tests/integration"

      # Validate Code was formatted with Black, black is only supported in Python 3
      - if [[ $PYTHON_VERSION = "3"* ]]; then black --check setup.py tests aws_lambda_builders; fi
